// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package toggles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TogglesClient is the client API for Toggles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TogglesClient interface {
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (Toggles_ListenClient, error)
}

type togglesClient struct {
	cc grpc.ClientConnInterface
}

func NewTogglesClient(cc grpc.ClientConnInterface) TogglesClient {
	return &togglesClient{cc}
}

func (c *togglesClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, "/toggles.Toggles/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *togglesClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (Toggles_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &Toggles_ServiceDesc.Streams[0], "/toggles.Toggles/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &togglesListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Toggles_ListenClient interface {
	Recv() (*ListenPayload, error)
	grpc.ClientStream
}

type togglesListenClient struct {
	grpc.ClientStream
}

func (x *togglesListenClient) Recv() (*ListenPayload, error) {
	m := new(ListenPayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TogglesServer is the server API for Toggles service.
// All implementations must embed UnimplementedTogglesServer
// for forward compatibility
type TogglesServer interface {
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	Listen(*ListenRequest, Toggles_ListenServer) error
	mustEmbedUnimplementedTogglesServer()
}

// UnimplementedTogglesServer must be embedded to have forward compatible implementations.
type UnimplementedTogglesServer struct {
}

func (UnimplementedTogglesServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedTogglesServer) Listen(*ListenRequest, Toggles_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedTogglesServer) mustEmbedUnimplementedTogglesServer() {}

// UnsafeTogglesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TogglesServer will
// result in compilation errors.
type UnsafeTogglesServer interface {
	mustEmbedUnimplementedTogglesServer()
}

func RegisterTogglesServer(s grpc.ServiceRegistrar, srv TogglesServer) {
	s.RegisterService(&Toggles_ServiceDesc, srv)
}

func _Toggles_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TogglesServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toggles.Toggles/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TogglesServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Toggles_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TogglesServer).Listen(m, &togglesListenServer{stream})
}

type Toggles_ListenServer interface {
	Send(*ListenPayload) error
	grpc.ServerStream
}

type togglesListenServer struct {
	grpc.ServerStream
}

func (x *togglesListenServer) Send(m *ListenPayload) error {
	return x.ServerStream.SendMsg(m)
}

// Toggles_ServiceDesc is the grpc.ServiceDesc for Toggles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Toggles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "toggles.Toggles",
	HandlerType: (*TogglesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _Toggles_Fetch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Toggles_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "toggles.proto",
}
